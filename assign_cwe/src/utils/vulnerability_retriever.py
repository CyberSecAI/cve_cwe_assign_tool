# src/utils/vulnerability_retriever.py

"""
Retriever for vulnerability information from various sources.
"""

import os
from typing import Dict, List, Tuple, Any, Optional
from models.vulnerability_info import VulnerabilityInfo, SimilarityInsight
from utils.logger import get_logger
from utils.file_ops import ensure_directory, save_json, save_markdown
from config.settings import ConfigManager

# Import original utility functions
from utils.get_vulnerability_info import (
    get_vulnerability_description,
    get_vulnerability_reference_content,
    get_vulnerability_key_phrases,
    get_similar_cve_info,
    _create_similarity_summary
)

logger = get_logger(__name__)

class VulnerabilityInfoRetriever:
    """Retrieves and manages vulnerability information from various sources."""
    
    def __init__(self, config: Any, output_dir: Optional[str] = None):
        """
        Initialize the retriever.
        
        Args:
            config: Configuration manager with paths
            output_dir: Optional output directory for saving data
        """
        self.config = config
        self.output_dir = output_dir
        
        # Extract commonly used paths from config
        self.cve_info_path = config.config.data_sources.get('cve_info_path', '')
        self.cve_refs_path = config.config.data_sources.get('cve_refs_path', '')
        
        if not self.cve_info_path or not self.cve_refs_path:
            logger.warning("CVE data paths not properly configured")
    
    def get_vulnerability_info(self, cve_id: str) -> VulnerabilityInfo:
        """
        Get complete information for a vulnerability.
        
        Args:
            cve_id: The CVE identifier
            
        Returns:
            VulnerabilityInfo object with all available information
        """
        logger.info(f"Gathering complete vulnerability information for {cve_id}")
        
        try:
            # Get basic vulnerability information
            description = get_vulnerability_description(cve_id, self.cve_info_path)
            if not description:
                logger.warning(f"No description found for {cve_id}")
                
            key_phrases = get_vulnerability_key_phrases(cve_id, self.cve_info_path)
            if not key_phrases:
                logger.warning(f"No key phrases found for {cve_id}")
                
            reference_content = get_vulnerability_reference_content(cve_id, self.cve_refs_path)
            if not reference_content:
                logger.debug(f"No reference content found for {cve_id}")
            
            # Get enhanced similar CVE information using key phrases
            weakness = key_phrases.get('weakness', '')
            rootcause = key_phrases.get('rootcause', '')
            similar_info = get_similar_cve_info(
                cve_id, 
                output_dir=self.output_dir,
                weakness=weakness, 
                rootcause=rootcause
            )
            
            # Create a summary of similarity insights
            similarity_summary_dict = _create_similarity_summary(similar_info)
            
            # Convert to SimilarityInsight object
            similarity_summary = SimilarityInsight(
                consensus_cwe=similarity_summary_dict.get('consensus_cwe', ''),
                top_cwes=similarity_summary_dict.get('top_cwes', []),
                confidence_levels=similarity_summary_dict.get('confidence_levels', 
                                                            {'high': [], 'medium': [], 'low': []}),
                total_samples=similarity_summary_dict.get('total_samples', 0)
            )
            
            # Create and return the VulnerabilityInfo object
            vulnerability_info = VulnerabilityInfo(
                cve_id=cve_id,
                description=description,
                key_phrases=key_phrases,
                reference_content=reference_content,
                similar_info=similar_info,
                similarity_summary=similarity_summary
            )
            
            logger.info(f"Successfully gathered complete information for {cve_id}")
            if similarity_summary.consensus_cwe:
                logger.info(f"Consensus CWE for {cve_id}: {similarity_summary.consensus_cwe}")
            
            return vulnerability_info
            
        except Exception as e:
            logger.error(f"Error getting complete vulnerability info for {cve_id}: {str(e)}")
            # Return a minimal object with just the CVE ID in case of error
            return VulnerabilityInfo(cve_id=cve_id)
    
    def get_markdown(self, cve_id: str) -> str:
        """
        Get vulnerability information as markdown.
        
        Args:
            cve_id: The CVE identifier
            
        Returns:
            Markdown-formatted string containing the vulnerability information
        """
        info = self.get_vulnerability_info(cve_id)
        
        sections = []
        
        # Core Identification
        sections.append(f"# {info.cve_id}")
        
        # Description
        sections.append("## Vulnerability Description\n" + info.description)
        
        # Key Phrases
        if info.key_phrases:
            phrases_section = ["### Vulnerability Description Key Phrases"]
            for key, value in info.key_phrases.items():
                if value:
                    phrases_section.append(f"- **{key}:** {value}")
            sections.append("\n".join(phrases_section))
        
        # Similar CVE Analysis with CWE Patterns
        if info.similar_info or info.similarity_summary.consensus_cwe:
            similar_section = ["### CWEs for similar CVE Descriptions"]
            
            # Primary CWE Match
            if consensus_cwe := info.similarity_summary.consensus_cwe:
                similar_section.append(f"#### Primary CWE Match\n{consensus_cwe}")
                
                # Top CWEs
                if info.similarity_summary.top_cwes:
                    similar_section.append("\n#### Top CWEs")
                    for cwe, _ in info.similarity_summary.top_cwes:
                        similar_section.append(f"- {cwe}")
                
                # Confidence levels
                confidence_levels = info.similarity_summary.confidence_levels
                if any(confidence_levels.values()):
                    similar_section.append("\n### Confidence Information")
                    
                    if high_confidence := confidence_levels.get('high', []):
                        similar_section.append(f"- High confidence (95%+): {', '.join(high_confidence)}")
                    
                    if medium_confidence := confidence_levels.get('medium', []):
                        similar_section.append(f"- Medium confidence (85-94%): {', '.join(medium_confidence)}")
                    
                    # Collect all unique CWEs from low confidence and ones not in high/medium
                    all_cwes = set()
                    for level, cwes in confidence_levels.items():
                        all_cwes.update(cwes)
                    
                    high_medium_cwes = set(confidence_levels.get('high', []) + confidence_levels.get('medium', []))
                    additional_cwes = all_cwes - high_medium_cwes
                    
                    if additional_cwes:
                        similar_section.append(f"- Additional related CWEs: {', '.join(sorted(additional_cwes))}")
                       
            sections.append("\n".join(similar_section))
        
        # CVE Reference Link Content Summary
        if info.reference_content:
            sections.append("## CVE Reference Links Content Summary\n" + info.reference_content)
        
        return "\n\n".join(sections)
    
    def save_info_files(self, info: VulnerabilityInfo) -> None:
        """
        Save vulnerability information to various files.
        
        Args:
            info: VulnerabilityInfo object
        """
        if not self.output_dir:
            logger.warning("No output directory specified, skipping file saving")
            return
        
        cve_dir = os.path.join(self.output_dir, info.cve_id)
        ensure_directory(cve_dir)
        
        # Save description as markdown
        md_content = self.get_markdown(info.cve_id)
        save_markdown(
            os.path.join(cve_dir, f"{info.cve_id}_description.md"),
            f"Vulnerability Information: {info.cve_id}",
            md_content
        )
        
        # Save full info as JSON
        save_json(
            os.path.join(cve_dir, f"{info.cve_id}_info.json"),
            info.to_dict()
        )
        
        logger.info(f"Saved vulnerability information files for {info.cve_id}")