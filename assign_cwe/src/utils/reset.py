# src/utils/reset.py

from utils.logger import get_logger
import shutil
import os
from pathlib import Path

logger = get_logger(__name__)

# "./data/context_cache", this is generated by LLM so don't delete
def reset_storage():
    """Reset all storage and cache directories while preserving contexts.json."""
    from config.settings import ConfigManager  # Import ConfigManager

    # Initialize ConfigManager to get Neo4j credentials
    config_manager = ConfigManager()
    neo4j_config = config_manager.get_neo4j_config()

    directories = [
        "./data/qdrant",
        "./data/property_graph",  # Neo4j data
        "./cache",
        "./storage"
    ]
    
    # Clean up Neo4j data using credentials from ConfigManager
    try:
        from neo4j import GraphDatabase
        uri = neo4j_config["url"]
        auth = (neo4j_config["username"], neo4j_config["password"])
        
        with GraphDatabase.driver(uri, auth=auth) as driver:
            with driver.session() as session:
                session.run("MATCH (n) DETACH DELETE n")  # Delete all nodes and relationships
        logger.info("Cleaned Neo4j database")
    except Exception as e:
        logger.error("Error cleaning Neo4j database: {}", str(e))
    
    # Remove directories (excluding context_cache)
    for dir_path in directories:
        try:
            if os.path.exists(dir_path):
                shutil.rmtree(dir_path)
                logger.info("Removed directory: {}", dir_path)
        except Exception as e:
            logger.error("Error removing directory {}: {}", dir_path, str(e))
            
    # Remove specific files (excluding contexts.json)
    files_to_remove = [
        # Add any other files you want to remove here
    ]
    
    for file_path in files_to_remove:
        try:
            if os.path.exists(file_path):
                os.remove(file_path)
                logger.info("Removed file: {}", file_path)
        except Exception as e:
            logger.error("Error removing file {}: {}", file_path, str(e))
            
    # Create necessary directories
    for dir_path in directories:
        try:
            os.makedirs(dir_path, exist_ok=True)
            logger.info("Created directory: {}", dir_path)
        except Exception as e:
            logger.error("Error creating directory {}: {}", dir_path, str(e))
            
    logger.success("Storage reset complete (contexts.json preserved)")