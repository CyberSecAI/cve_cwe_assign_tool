# src/models/vulnerability_info.py

"""
Models for vulnerability information representation.
"""

from dataclasses import dataclass, field
from typing import Dict, List, Any, Optional, Set

@dataclass
class SimilarityInsight:
    """Represents insights from similarity analysis."""
    consensus_cwe: str = ""
    top_cwes: List[tuple] = field(default_factory=list)
    confidence_levels: Dict[str, List[str]] = field(default_factory=lambda: {
        'high': [], 'medium': [], 'low': []
    })
    total_samples: int = 0

@dataclass
class VulnerabilityInfo:
    """Represents complete information about a vulnerability."""
    cve_id: str
    description: str = ""
    key_phrases: Dict[str, str] = field(default_factory=dict)
    reference_content: Optional[str] = None
    
    similar_info: Dict[str, Any] = field(default_factory=dict)
    similarity_summary: SimilarityInsight = field(default_factory=SimilarityInsight)
    
    analysis: str = ""
    analysis_with_relationships: str = ""  # New field to store enhanced analysis
    criticism: str = ""
    resolution: str = ""
    
    relevant_cwes: List[Dict[str, Any]] = field(default_factory=list)
    identified_cwes: Dict[str, List[str]] = field(default_factory=lambda: {
        'analyzer': [], 'critic_additional': []
    })
    
    @property
    def detected_cwes(self) -> List[str]:
        """Get all detected CWEs from relevant_cwes."""
        result = []
        for cwe in self.relevant_cwes:
            if 'metadata' in cwe and 'doc_id' in cwe['metadata']:
                result.append(cwe['metadata']['doc_id'])
        return result
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert the object to a dictionary."""
        return {
            'cve_id': self.cve_id,
            'description': self.description,
            'key_phrases': self.key_phrases,
            'reference_content': self.reference_content,
            'similar_info': self.similar_info,
            'similarity_summary': {
                'consensus_cwe': self.similarity_summary.consensus_cwe,
                'top_cwes': self.similarity_summary.top_cwes,
                'confidence_levels': self.similarity_summary.confidence_levels,
                'total_samples': self.similarity_summary.total_samples
            },
            'analysis': self.analysis,
            'analysis_with_relationships': self.analysis_with_relationships,  # Include enhanced analysis
            'criticism': self.criticism,
            'resolution': self.resolution,
            'relevant_cwes': self.relevant_cwes,
            'identified_cwes': self.identified_cwes
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'VulnerabilityInfo':
        """Create an instance from a dictionary."""
        similarity_summary = SimilarityInsight(
            consensus_cwe=data.get('similarity_summary', {}).get('consensus_cwe', ''),
            top_cwes=data.get('similarity_summary', {}).get('top_cwes', []),
            confidence_levels=data.get('similarity_summary', {}).get('confidence_levels', 
                                                                    {'high': [], 'medium': [], 'low': []}),
            total_samples=data.get('similarity_summary', {}).get('total_samples', 0)
        )
        
        return cls(
            cve_id=data.get('cve_id', ''),
            description=data.get('description', ''),
            key_phrases=data.get('key_phrases', {}),
            reference_content=data.get('reference_content'),
            similar_info=data.get('similar_info', {}),
            similarity_summary=similarity_summary,
            analysis=data.get('analysis', ''),
            analysis_with_relationships=data.get('analysis_with_relationships', ''),  # Load enhanced analysis
            criticism=data.get('criticism', ''),
            resolution=data.get('resolution', ''),
            relevant_cwes=data.get('relevant_cwes', []),
            identified_cwes=data.get('identified_cwes', {})
        )
@dataclass
class ProcessingResult:
    """Represents the result of vulnerability processing."""
    cve_id: str
    status: str  # 'success' or 'error'
    vulnerability_info: Optional[VulnerabilityInfo] = None
    processing_time: float = 0.0
    error: str = ""
    
    @property
    def is_success(self) -> bool:
        """Check if processing was successful."""
        return self.status == 'success'